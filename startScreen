def setup():
    size(752,480)

def draw():
    background(51,102,51)
    textSize(100)
    fill(204,0,0)
    text("Diving", 120, 100)
    fill(153,255,0)
    text("Game!", 300, 215)
    
    textSize(24)
   
    fill(255,255,255)
    text('Normal', 320, 340)
    fill(255,255,255)
    text('Easy', 320, 400)
    fill(255,255,255)
    text('Credit  1', 10,470)
    
    if mousePressed == True:
        screen = 1
    
    if screen == 1:
        frameheight = 480
        obstacles = []
        animationcounter = 0
        framewidth = 512 + 240
        frameheight = 480
        background = character(0, 0, 512, 4192, "background.png", "blank")
        tora = character(100, 30, 32, 32, "tora1.png", "character")
        weapon = character(0, 0, 10, 10, "", "weapon")
        ui = character(512, 0, 240, 480, "red.png", "blank")
        collectedTreasure = []
        bigChest = character(600, 200, 64, 64, "", "blank")
        maptype = ''
        collectedTreasures = 0
        gameStatus = "playing"

        treasures = []

        sounds = []
        #Clip bgm
        camx = 0
        camy = 0
        Camera = camera(0, 0)

        def move():
            tora.move(framewidth, frameheight)
            #for i in obstacles:
            #    i.move()

        def update():
            background.update(frameheight, framewidth)
            #if Camera.movement != "stop":
            #    for i in obstacles: 
            #        obstacles.get(i).update()
            #        
            #for i in treasures:
            #    treasures.get(i).update()
            tora.update(frameheight, framewidth)

        def paint():
            translate(0, 0)
            translate(-Camera.x, -Camera.y)
            background.paint()
            #for i in obstacles:
            #    i.paint()
            #for i in treasures:
            #    i.paint()
            translate(Camera.x, Camera.y)
            tora.paint()
            ui.paint()
            #for i in collectedTreasure:
            #    i.paint()
            #bigChest.paint()
            fill(255,255,255)
            rect(600, 50, tora.health*10,10)
            fill(0,0,0)
            rect(600+tora.health*10,50,(10-tora.health)*10,10)
            #print("kk")

        def setup():
            tora.setup()
            background.setup()
            ui.setup()
            size(framewidth,frameheight)
            #size(900,900)

        def main(): 
            finalwidth = framewidth
            finalheight = frameheight
            maptype = "default"
            Map.createMap(Map(),obstacles,treasures,background)
        main()

        def draw():
            clear()
            if gameStatus == "playing":
                move()
                tora.up = True
                tora.down = True
                tora.left = True
                tora.right = True
                update()
                Camera.update()
                paint()
        def keyPressed():
            character.keyPressed(tora)
        def keyReleased():
            character.keyReleased(tora)
            class character(object):
          xkey = False
          ykey = False
          xdir = ""
          ydir = ""
          up = True
          down = True
          left = True
          right = True
          leftpressed = False
          rightpressed = False
          uppressed = False
          downpressed = False
          moving = True
          attack = False
          attackDir = ""
          speedX = 0
          speedY = 0
          counter = 0
          attackcounter = 0
          lastDir = "up"
          bigTreasure = False
          health = 10
          invincible = 0
          attackposition = 1
          src = loadImage("red.png")
          loadedimage = ""

          directionqueue = []
          verticalqueue = []
          horizontalqueue = []

          def __init__(self, x, y, width, height, src, type):
              self.x = x
              self.y = y
              self.width = width
              self.height = height
              self.src = src
              self.type = type

          def setup(self):
              self.loadedimage = loadImage(self.src)

          def move(self,framewidth,frameheight):
            #if ((self.x - 2 >= 0 and self.speedX < 0) or (self.x + self.width + 2 <= 512 and self.speedX > 0)):
             # if ((self.left == True and self.xdir == "left") or (self.right == True and self.xdir == "right")):
                self.x += self.speedX
            #if ((self.y - 2 >= 0 and self.speedY < 0) or (self.y + self.height + 2 <= frameheight and self.speedY > 0)) :
             # if ((self.up == True and self.ydir == "up") or (self.down == True and self.ydir == "down")) :
                self.y += self.speedY


          def animate(self) :
            if (self.type == "character") :
              if (self.invincible % 10 > 7) :
                self.src = "yellow.png"
              elif (Game.weapon.attack == True) :
                if (attackDir == "up") :
                  if (Game.animationcounter <= 10) :
                    self.src = "toraupattack1.png"
                  elif (Game.animationcounter <= 20) :
                    self.src = "toraupattack2.png"

                elif (attackDir == "down") :
                  if (Game.animationcounter <= 10) :
                    self.src = "toradownattack1.png"
                  elif (Game.animationcounter <= 20) :
                    self.src = "toradownattack2.png"

                elif (attackDir == "left") :
                  if (Game.animationcounter <= 10) :
                    self.src = "toraleftattack1.png"
                  elif (Game.animationcounter <= 20) :
                    self.src = "toraleftattack2.png"

                elif (attackDir == "right") :
                  if (Game.animationcounter <= 10) :
                    self.src = "torarightattack1.png"
                  elif (Game.animationcounter <= 20) :
                    self.src = "torarightattack2.png"


              elif (not directionqueue) :
                if (directionqueue.get(0) == "up") :
                  if (Game.animationcounter <= 10) :
                    self.src = "toraup1.png"
                  elif (Game.animationcounter <= 20) :
                    self.src = "toraup2.png"

                elif (directionqueue.get(0) == "down") :
                  if (Game.animationcounter <= 10) :
                    self.src = "toradown1.png"
                  elif (Game.animationcounter <= 20) :
                    self.src = "toradown2.png"

                elif (directionqueue.get(0) == "left") :
                  if (Game.animationcounter <= 10) :
                    self.src = "toraleft1.png"
                  elif (Game.animationcounter <= 20) :
                    self.src = "toraleft2.png"

                elif (directionqueue.get(0) == "right") :
                  if (Game.animationcounter <= 10) :
                    self.src = "toraright1.png"
                  elif (Game.animationcounter <= 20) :
                    self.src = "toraright2.png"

              else :
                if (lastDir == "up") :
                  if (Game.animationcounter <= 10) :
                    self.src = "toraup1.png"
                  elif (Game.animationcounter <= 20) :
                    self.src = "toraup2.png"

                elif (lastDir == "down") :
                  if (Game.animationcounter <= 10) :
                    self.src = "toradown1.png"
                  elif (Game.animationcounter <= 20) :
                    self.src = "toradown2.png"

                elif (lastDir == "left") :
                  if (Game.animationcounter <= 10) :
                    self.src = "toraleft1.png"
                  elif (Game.animationcounter <= 20) :
                    self.src = "toraleft2.png"

                elif (lastDir == "right") :
                  if (Game.animationcounter <= 10) :
                    self.src = "toraright1.png"
                  elif (Game.animationcounter <= 20) :
                    self.src = "toraright2.png"

          def loseHealth(healthAmount, invincibleAmount):
            if (self.invincible == 0):
              self.health -= healthAmount
              self.invincible += invincibleAmount
              if (not Game.collectedTreasure):
                Game.collectedTreasure.remove(Game.collectedTreasure.size() - 1)
                Game.collectedTreasures-=1
              elif (Game.tora.bigTreasure == True):
                Game.bigChest.src = ""

          def update(self, frameheight, framewidth):
            if (self.y + self.height > frameheight):
              self.y = frameheight - self.height
            if (self.y < 0 and self.moving == True):
              self.y = 0

            if (len(self.horizontalqueue)==0):
              self.speedX = 0
            elif (self.horizontalqueue[0] == "left"):
              self.speedX = -3
            elif (self.horizontalqueue[0] == "right"):
              self.speedX = 3

            if (len(self.verticalqueue) == 0):
              self.speedY = 0
            elif (self.verticalqueue[0] == "up"):
              self.speedY = -3
            elif (self.verticalqueue[0] == "down"):
              self.speedY = 3

            #animate()

            if ((self.speedX == 0 and self.speedY == 0) or (self.counter == 22)):
              self.counter = 0
            else:
              self.counter+=1

            # System.out.println(horizontalqueue)
            # System.out.println(verticalqueue)
            # System.out.println(directionqueue)

          def paint(self):
            image(self.loadedimage,self.x,self.y,self.width,self.height)

          def keyReleased(self):
            if (key == 'a'):
              self.xkey = False
              self.directionqueue.remove("left")
              self.horizontalqueue.remove("left")
              self.leftpressed = False
              lastDir = "left"

            if (key == 'd'):
              self.xkey = False
              self.directionqueue.remove("right")
              self.horizontalqueue.remove("right")
              self.rightpressed = False
              lastDir = "right"

            if (key == 'w'):
              self.ykey = False
              self.directionqueue.remove("up")
              self.verticalqueue.remove("up")
              self.uppressed = False
              lastDir = "up"

            if (key == 's'):
              self.ykey = False
              self.directionqueue.remove("down")
              self.verticalqueue.remove("down")
              self.downpressed = False
              lastDir = "down"

          def keyPressed(self):
            #print(key)
            if (self.moving == True):
              if (key == 'a' and self.left == True and self.leftpressed == False):
                self.directionqueue.insert(0, "left")
                self.horizontalqueue.insert(0, "left")
                self.xkey = True
                self.xdir = "left"
                self.leftpressed = True

              if (key == 'd' and self.right == True and self.rightpressed == False):
                self.directionqueue.insert(0, "right")
                self.horizontalqueue.insert(0, "right")
                self.xkey = True
                self.xdir = "right"
                self.rightpressed = True

              if (key == 'w' and self.up == True and self.uppressed == False):
                self.directionqueue.insert(0, "up")
                self.verticalqueue.insert(0, "up")
                self.ykey = True
                self.ydir = "up"
                self.uppressed = True

              if (key == 's' and self.down == True and self.downpressed == False):
                self.directionqueue.insert(0, "down")
                self.verticalqueue.insert(0, "down")
                self.ykey = True
                self.ydir = "down"
                self.downpressed = True
